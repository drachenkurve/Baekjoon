#include <iostream>

using namespace std;

// N = 1 (1개)
// -> 1
//
// N = 2 (2개)
// -> 1 + 1
// -> 2
//
// N = 3 (4개)
// -> 1 + 1 + 1
// -> 1 + 2
// -> 2 + 1
// -> 3
//
// N = 4 (7개)
// -> 1 + 1 + 1 + 1
// -> 1 + 1 + 2
// -> 1 + 2 + 1
// -> 2 + 1 + 1
// -> 3 + 1
// -> 2 + 2
// -> 1 + 3
//
// N = 5 (13개)
// -> 1 + 1 + 1 + 1 + 1
// -> 1 + 1 + 1 + 2
// -> 1 + 1 + 2 + 1
// -> 1 + 2 + 1 + 1
// -> 2 + 1 + 1 + 1
// -> 1 + 1 + 3
// -> 1 + 3 + 1
// -> 3 + 1 + 1
// -> 1 + 2 + 2
// -> 2 + 1 + 2
// -> 2 + 2 + 1
// -> 2 + 3
// -> 3 + 2

// N에서 모든 경우의 수
inline int dp[11];

inline void solve()
{
	int t;
	cin >> t;

	// 이전에 가능한 경우의 수의 합 -> 가능한가?
	// N이 4일때 1, 2, 3을 만들 수 있는 방법의 수의 합
	//
	// N이 2일때랑 N이 3일때 2랑 3이 처리됨 -> 3까지 초기 상태 필요
	//
	// 점화식:
	// dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3];

	dp[1] = 1;
	dp[2] = 2;
	dp[3] = 4;

	// 최대가 작고 tc가 있으니 미리 계산
	for (int ii = 4; ii <= 11; ++ii)
	{
		dp[ii] = dp[ii - 1] + dp[ii - 2] + dp[ii - 3];
	}

	for (int tt = 0; tt < t; ++tt)
	{
		int n;
		cin >> n;

		cout << dp[n] << '\n';
	}
}
